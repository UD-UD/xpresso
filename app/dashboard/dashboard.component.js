"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var elementRegistryModule = require("nativescript-angular/element-registry");
elementRegistryModule.registerElement("CardView", function () { return require("nativescript-cardview").CardView; });
var card = require("nativescript-cardview").CardView;
var page_1 = require("ui/page");
var dashboard_service_1 = require("../services/dashboard.service");
var observable_array_1 = require("data/observable-array");
var fire_base_db_service_1 = require("../services/fire-base-db.service");
var angular_1 = require("nativescript-ui-sidedrawer/angular");
var nativescript_ng2_fonticon_1 = require("nativescript-ng2-fonticon");
var couchdb_service_1 = require("../services/couchdb.service");
var qrcode_service_1 = require("../services/qrcode.service");
var DashboardComponent = /** @class */ (function () {
    function DashboardComponent(page, dashboardService, FireDbService, QRcode, _changeDetectionRef, fonticon, couchbase) {
        this.page = page;
        this.dashboardService = dashboardService;
        this.FireDbService = FireDbService;
        this.QRcode = QRcode;
        this._changeDetectionRef = _changeDetectionRef;
        this.fonticon = fonticon;
        this.couchbase = couchbase;
        this.items = [];
    }
    DashboardComponent.prototype.ngOnInit = function () {
        //let stack = <StackLayout>this.contentStackRef.nativeElement;
        var gridlayout = this.contentStackRef.nativeElement;
        this.gridCards = new observable_array_1.ObservableArray();
        var dashboardData = this.dashboardService.getDashBoardData();
        this.mainImage = dashboardData.mainCard.mainImage;
        this.senderImage = dashboardData.mainCard.senderImage;
        this.senderMessage = dashboardData.mainCard.senderMessage;
        this.gridCards.push(dashboardData.gridCard);
        this.rows = this.couchbase.getCouchData();
        console.log(JSON.stringify(this.rows));
        this.userdata = this.rows[0].userdata;
        this.imgsrc = this.QRcode.getImageFrombase64(this.userdata.QRcode);
        this.userName = this.userdata.name;
        this.profilePic = this.QRcode.getImageFrombase64(this.userdata.profile_pic);
    };
    DashboardComponent.prototype.getLogs = function () {
        this.logs = this.FireDbService.logs;
    };
    DashboardComponent.prototype.ngAfterViewInit = function () {
        this.drawer = this.drawerComponent.sideDrawer;
        this._changeDetectionRef.detectChanges();
    };
    DashboardComponent.prototype.getCouchuser = function () {
        this.rows = this.couchbase.getCouchData();
        console.log(JSON.stringify(this.rows));
        this.userdata = this.rows[0].userdata;
        //this.imgsrc = this.QRcode.generateBarcode(this.userdata.email);
        console.log(JSON.stringify(this.imgsrc));
    };
    DashboardComponent.prototype.openDrawer = function () {
        this.drawer.showDrawer();
    };
    DashboardComponent.prototype.onCloseDrawerTap = function () {
        this.drawer.closeDrawer();
    };
    DashboardComponent.prototype.toggleDrawer = function () {
        this.drawer.toggleDrawerState();
    };
    __decorate([
        core_1.ViewChild("contentStack"),
        __metadata("design:type", core_1.ElementRef)
    ], DashboardComponent.prototype, "contentStackRef", void 0);
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], DashboardComponent.prototype, "drawerComponent", void 0);
    DashboardComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-dashboard',
            templateUrl: './dashboard.component.html',
            styleUrls: ['./dashboard.component.scss']
        }),
        __metadata("design:paramtypes", [page_1.Page,
            dashboard_service_1.DashboardService,
            fire_base_db_service_1.FireBaseDbService,
            qrcode_service_1.QrcodeService,
            core_1.ChangeDetectorRef,
            nativescript_ng2_fonticon_1.TNSFontIconService,
            couchdb_service_1.CouchdbService])
    ], DashboardComponent);
    return DashboardComponent;
}());
exports.DashboardComponent = DashboardComponent;
//# sourceMappingURL=data:application/json;base64,