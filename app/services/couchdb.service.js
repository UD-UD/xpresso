"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
var CouchdbService = /** @class */ (function () {
    function CouchdbService() {
        this.DATABASE_NAME = "user-database";
    }
    CouchdbService.prototype.initCouch = function () {
        if (this.database == undefined) {
            this.database = new nativescript_couchbase_1.Couchbase(this.DATABASE_NAME); //create db if not present or getinstance
            this.database.createView("getUserData", "1", function (document, emitter) {
                if (document.userdata) {
                    emitter.emit(document._id, document);
                }
            });
        }
    };
    CouchdbService.prototype.createUserDataEntry = function (userdata) {
        this.initCouch();
        return this.database.createDocument({
            "userdata": userdata
        });
    };
    CouchdbService.prototype.getCouchData = function () {
        if (this.rows == undefined) {
            this.initCouch();
            var rows = this.database.executeQuery("getUserData");
            for (var i = 0; i < rows.length; i++) {
                console.log(i);
                console.log(JSON.stringify(rows[i]));
            }
            this.rows = rows;
        }
        return this.rows;
    };
    CouchdbService.prototype.setUserData = function (userdata) {
        if (this.getCouchData().length == 0)
            console.log(this.createUserDataEntry(userdata));
        else {
            this.getCouchData();
        }
    };
    CouchdbService.prototype.checkLoggedInStatus = function () {
        this.initCouch();
        var rows = this.getCouchData();
        if (rows.length != 0) {
            if (rows[0].userdata) {
                return rows[0].userdata.isLoggedIn ? true : false;
            }
        }
        else
            return false;
    };
    CouchdbService.prototype.getMessages = function () {
        if (this.rows == undefined) {
            this.getCouchData();
        }
        return this.rows[0].userdata.messages;
    };
    CouchdbService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CouchdbService);
    return CouchdbService;
}());
exports.CouchdbService = CouchdbService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291Y2hkYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY291Y2hkYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLGlFQUFtRDtBQUtuRDtJQU1FO1FBSEEsa0JBQWEsR0FBRyxlQUFlLENBQUM7SUFHaEIsQ0FBQztJQUVULGtDQUFTLEdBQWpCO1FBQ0UsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQSxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQ0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLHlDQUF5QztZQUM1RixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLFVBQVMsUUFBUSxFQUFFLE9BQU87Z0JBQ3JFLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBRU8sNENBQW1CLEdBQTNCLFVBQTRCLFFBQW1CO1FBQzdDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFDbEMsVUFBVSxFQUFHLFFBQVE7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxDQUFBLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JELEdBQUcsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNuQixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxRQUFtQjtRQUM3QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FDSixDQUFDO1lBQ0EsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JCLENBQUM7SUFDUCxDQUFDO0lBRUQsNENBQW1CLEdBQW5CO1FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMvQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDbkIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUM7Z0JBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDcEQsQ0FBQztRQUNILENBQUM7UUFDRCxJQUFJO1lBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUVqQixDQUFDO0lBRUQsb0NBQVcsR0FBWDtRQUNFLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLENBQUEsQ0FBQztZQUN6QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDeEMsQ0FBQztJQWxFVSxjQUFjO1FBRDFCLGlCQUFVLEVBQUU7O09BQ0EsY0FBYyxDQW1FMUI7SUFBRCxxQkFBQztDQUFBLEFBbkVELElBbUVDO0FBbkVZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ291Y2hiYXNlIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1jb3VjaGJhc2VcIjtcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSBcIi4uL21vZGVsL1VzZXJEYXRhXCI7XG5pbXBvcnQgeyBUb2FzdHkgfSBmcm9tICduYXRpdmVzY3JpcHQtdG9hc3R5JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvdWNoZGJTZXJ2aWNlIHtcblxuICBkYXRhYmFzZSA6IENvdWNoYmFzZSA7XG4gIERBVEFCQVNFX05BTUUgPSBcInVzZXItZGF0YWJhc2VcIjtcbiAgdXNlckRhdGEgOiBVc2VyRGF0YTtcbiAgcm93cyA6IGFueTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBwcml2YXRlIGluaXRDb3VjaCgpIDogdm9pZCB7XG4gICAgaWYodGhpcy5kYXRhYmFzZSA9PSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5kYXRhYmFzZSA9IG5ldyBDb3VjaGJhc2UodGhpcy5EQVRBQkFTRV9OQU1FKTsgLy9jcmVhdGUgZGIgaWYgbm90IHByZXNlbnQgb3IgZ2V0aW5zdGFuY2VcbiAgICAgIHRoaXMuZGF0YWJhc2UuY3JlYXRlVmlldyhcImdldFVzZXJEYXRhXCIsIFwiMVwiLCBmdW5jdGlvbihkb2N1bWVudCwgZW1pdHRlcikge1xuICAgICAgICBpZihkb2N1bWVudC51c2VyZGF0YSkge1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY3VtZW50Ll9pZCwgZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVVzZXJEYXRhRW50cnkodXNlcmRhdGEgOiBVc2VyRGF0YSkgOiBOdW1iZXIge1xuICAgIHRoaXMuaW5pdENvdWNoKCk7XG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuY3JlYXRlRG9jdW1lbnQoe1xuICAgICAgXCJ1c2VyZGF0YVwiIDogdXNlcmRhdGFcbiAgICB9KTtcbiAgfVxuICBcbiAgZ2V0Q291Y2hEYXRhKCkge1xuICAgIGlmKHRoaXMucm93cyA9PSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5pbml0Q291Y2goKTtcbiAgICAgIGxldCByb3dzID0gdGhpcy5kYXRhYmFzZS5leGVjdXRlUXVlcnkoXCJnZXRVc2VyRGF0YVwiKTtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGkpXG4gICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocm93c1tpXSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5yb3dzID0gcm93cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucm93cztcbiAgfVxuXG4gIHNldFVzZXJEYXRhKHVzZXJkYXRhIDogVXNlckRhdGEpe1xuICAgIGlmKHRoaXMuZ2V0Q291Y2hEYXRhKCkubGVuZ3RoID09IDApIC8vIG5ldyB1c2VyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY3JlYXRlVXNlckRhdGFFbnRyeSh1c2VyZGF0YSkpO1xuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgIHRoaXMuZ2V0Q291Y2hEYXRhKCk7XG4gICAgICAgIH1cbiAgfVxuXG4gIGNoZWNrTG9nZ2VkSW5TdGF0dXMoKSA6IGJvb2xlYW57IFxuICAgIHRoaXMuaW5pdENvdWNoKCk7XG4gICAgbGV0IHJvd3MgPSB0aGlzLmdldENvdWNoRGF0YSgpO1xuICAgIGlmKHJvd3MubGVuZ3RoICE9IDApe1xuICAgICAgaWYocm93c1swXS51c2VyZGF0YSl7XG4gICAgICAgIHJldHVybiByb3dzWzBdLnVzZXJkYXRhLmlzTG9nZ2VkSW4gPyB0cnVlIDogZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBcbiAgfVxuXG4gIGdldE1lc3NhZ2VzKCl7XG4gICAgaWYodGhpcy5yb3dzID09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmdldENvdWNoRGF0YSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yb3dzWzBdLnVzZXJkYXRhLm1lc3NhZ2VzO1xuICB9XG59XG4iXX0=