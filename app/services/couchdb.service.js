"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
var CouchdbService = /** @class */ (function () {
    function CouchdbService() {
        this.DATABASE_NAME = "user-database";
    }
    CouchdbService.prototype.initCouch = function () {
        if (this.database == undefined) {
            this.database = new nativescript_couchbase_1.Couchbase(this.DATABASE_NAME); //create db if not present or getinstance
            this.database.createView("getUserData", "1", function (document, emitter) {
                if (document.userdata) {
                    emitter.emit(document._id, document);
                }
            });
        }
    };
    CouchdbService.prototype.createUserDataEntry = function (userdata) {
        this.initCouch();
        return this.database.createDocument({
            "userdata": userdata
        });
    };
    CouchdbService.prototype.getCouchData = function () {
        if (this.rows == undefined || this.rows.length == 0) {
            this.initCouch();
            var rows = this.database.executeQuery("getUserData");
            for (var i = 0; i < rows.length; i++) {
                console.log(i);
                console.log(JSON.stringify(rows[i]));
            }
            this.rows = rows;
        }
        return this.rows;
    };
    CouchdbService.prototype.setUserData = function (userdata) {
        if (this.getCouchData().length == 0)
            console.log(this.createUserDataEntry(userdata));
        else {
            this.getCouchData();
        }
    };
    CouchdbService.prototype.checkLoggedInStatus = function () {
        this.initCouch();
        var rows = this.getCouchData();
        if (rows.length != 0) {
            if (rows[0].userdata) {
                return rows[0].userdata.isLoggedIn ? true : false;
            }
        }
        else
            return false;
    };
    CouchdbService.prototype.getMessages = function () {
        if (this.rows == undefined || this.rows.length == 0) {
            this.getCouchData();
        }
        return this.rows[0].userdata.messages;
    };
    CouchdbService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CouchdbService);
    return CouchdbService;
}());
exports.CouchdbService = CouchdbService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291Y2hkYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY291Y2hkYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLGlFQUFtRDtBQUtuRDtJQU1FO1FBSEEsa0JBQWEsR0FBRyxlQUFlLENBQUM7SUFHaEIsQ0FBQztJQUVULGtDQUFTLEdBQWpCO1FBQ0UsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQSxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQ0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLHlDQUF5QztZQUM1RixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLFVBQVMsUUFBUSxFQUFFLE9BQU87Z0JBQ3JFLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBRU8sNENBQW1CLEdBQTNCLFVBQTRCLFFBQW1CO1FBQzdDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFDbEMsVUFBVSxFQUFHLFFBQVE7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNyRCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQ0FBVyxHQUFYLFVBQVksUUFBbUI7UUFDN0IsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQ0osQ0FBQztZQUNBLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQixDQUFDO0lBQ1AsQ0FBQztJQUVELDRDQUFtQixHQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0IsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ25CLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDO2dCQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3BELENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFBSTtZQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFFakIsQ0FBQztJQUVELG9DQUFXLEdBQVg7UUFDRSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2xELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBbEVVLGNBQWM7UUFEMUIsaUJBQVUsRUFBRTs7T0FDQSxjQUFjLENBbUUxQjtJQUFELHFCQUFDO0NBQUEsQUFuRUQsSUFtRUM7QUFuRVksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3VjaGJhc2UgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWNvdWNoYmFzZVwiO1xuaW1wb3J0IHsgVXNlckRhdGEgfSBmcm9tIFwiLi4vbW9kZWwvVXNlckRhdGFcIjtcbmltcG9ydCB7IFRvYXN0eSB9IGZyb20gJ25hdGl2ZXNjcmlwdC10b2FzdHknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ291Y2hkYlNlcnZpY2Uge1xuXG4gIGRhdGFiYXNlIDogQ291Y2hiYXNlIDtcbiAgREFUQUJBU0VfTkFNRSA9IFwidXNlci1kYXRhYmFzZVwiO1xuICB1c2VyRGF0YSA6IFVzZXJEYXRhO1xuICByb3dzIDogYW55O1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHByaXZhdGUgaW5pdENvdWNoKCkgOiB2b2lkIHtcbiAgICBpZih0aGlzLmRhdGFiYXNlID09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmRhdGFiYXNlID0gbmV3IENvdWNoYmFzZSh0aGlzLkRBVEFCQVNFX05BTUUpOyAvL2NyZWF0ZSBkYiBpZiBub3QgcHJlc2VudCBvciBnZXRpbnN0YW5jZVxuICAgICAgdGhpcy5kYXRhYmFzZS5jcmVhdGVWaWV3KFwiZ2V0VXNlckRhdGFcIiwgXCIxXCIsIGZ1bmN0aW9uKGRvY3VtZW50LCBlbWl0dGVyKSB7XG4gICAgICAgIGlmKGRvY3VtZW50LnVzZXJkYXRhKSB7XG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQoZG9jdW1lbnQuX2lkLCBkb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVXNlckRhdGFFbnRyeSh1c2VyZGF0YSA6IFVzZXJEYXRhKSA6IE51bWJlciB7XG4gICAgdGhpcy5pbml0Q291Y2goKTtcbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5jcmVhdGVEb2N1bWVudCh7XG4gICAgICBcInVzZXJkYXRhXCIgOiB1c2VyZGF0YVxuICAgIH0pO1xuICB9XG4gIFxuICBnZXRDb3VjaERhdGEoKSB7XG4gICAgaWYodGhpcy5yb3dzID09IHVuZGVmaW5lZCB8fCB0aGlzLnJvd3MubGVuZ3RoID09IDApe1xuICAgICAgdGhpcy5pbml0Q291Y2goKTtcbiAgICAgIGxldCByb3dzID0gdGhpcy5kYXRhYmFzZS5leGVjdXRlUXVlcnkoXCJnZXRVc2VyRGF0YVwiKTtcbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGkpXG4gICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocm93c1tpXSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5yb3dzID0gcm93cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucm93cztcbiAgfVxuXG4gIHNldFVzZXJEYXRhKHVzZXJkYXRhIDogVXNlckRhdGEpe1xuICAgIGlmKHRoaXMuZ2V0Q291Y2hEYXRhKCkubGVuZ3RoID09IDApIC8vIG5ldyB1c2VyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY3JlYXRlVXNlckRhdGFFbnRyeSh1c2VyZGF0YSkpO1xuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgIHRoaXMuZ2V0Q291Y2hEYXRhKCk7XG4gICAgICAgIH1cbiAgfVxuXG4gIGNoZWNrTG9nZ2VkSW5TdGF0dXMoKSA6IGJvb2xlYW57IFxuICAgIHRoaXMuaW5pdENvdWNoKCk7XG4gICAgbGV0IHJvd3MgPSB0aGlzLmdldENvdWNoRGF0YSgpO1xuICAgIGlmKHJvd3MubGVuZ3RoICE9IDApe1xuICAgICAgaWYocm93c1swXS51c2VyZGF0YSl7XG4gICAgICAgIHJldHVybiByb3dzWzBdLnVzZXJkYXRhLmlzTG9nZ2VkSW4gPyB0cnVlIDogZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBcbiAgfVxuXG4gIGdldE1lc3NhZ2VzKCl7XG4gICAgaWYodGhpcy5yb3dzID09IHVuZGVmaW5lZCB8fCB0aGlzLnJvd3MubGVuZ3RoID09IDApe1xuICAgICAgdGhpcy5nZXRDb3VjaERhdGEoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucm93c1swXS51c2VyZGF0YS5tZXNzYWdlcztcbiAgfVxufVxuIl19