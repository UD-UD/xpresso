"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
var CouchdbService = /** @class */ (function () {
    function CouchdbService() {
        this.DATABASE_NAME = "user-database";
    }
    CouchdbService.prototype.initCouch = function () {
        if (this.database == undefined) {
            this.database = new nativescript_couchbase_1.Couchbase(this.DATABASE_NAME); //create db if not present or getinstance
            this.database.createView("getUserData", "1", function (document, emitter) {
                if (document.userdata) {
                    emitter.emit(document._id, document);
                }
            });
        }
    };
    CouchdbService.prototype.createUserDataEntry = function (userdata) {
        this.initCouch();
        return this.database.createDocument({
            "userdata": userdata
        });
    };
    CouchdbService.prototype.getCouchData = function () {
        if (this.rows == undefined || this.rows.length == 0) {
            this.initCouch();
            var rows = this.database.executeQuery("getUserData");
            for (var i = 0; i < rows.length; i++) {
                console.log(i);
                console.log(JSON.stringify(rows[i]));
            }
            this.rows = rows;
        }
        return this.rows;
    };
    CouchdbService.prototype.setUserData = function (userdata) {
        if (this.getCouchData().length == 0) {
            console.log(this.createUserDataEntry(userdata));
            //  this.DocId = this.createUserDataEntry(userdata)
        }
        else {
            this.getCouchData();
        }
    };
    CouchdbService.prototype.updateUserData = function (docId, userdata) {
        this.database.updateDocument(docId, { "userdata": userdata });
    };
    CouchdbService.prototype.checkLoggedInStatus = function () {
        this.initCouch();
        var rows = this.getCouchData();
        if (rows.length != 0) {
            if (rows[0].userdata) {
                return rows[0].userdata.isLoggedIn ? true : false;
            }
        }
        else
            return false;
    };
    CouchdbService.prototype.getMessages = function () {
        if (this.rows == undefined || this.rows.length == 0) {
            this.getCouchData();
        }
        return this.rows[0].userdata.messages;
    };
    CouchdbService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CouchdbService);
    return CouchdbService;
}());
exports.CouchdbService = CouchdbService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291Y2hkYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY291Y2hkYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLGlFQUFtRDtBQUtuRDtJQU9FO1FBSkEsa0JBQWEsR0FBRyxlQUFlLENBQUM7SUFJaEIsQ0FBQztJQUVULGtDQUFTLEdBQWpCO1FBQ0UsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQSxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQ0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLHlDQUF5QztZQUM1RixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLFVBQVMsUUFBUSxFQUFFLE9BQU87Z0JBQ3JFLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNuQixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3pDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDO0lBRU8sNENBQW1CLEdBQTNCLFVBQTRCLFFBQW1CO1FBQzdDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFDbEMsVUFBVSxFQUFHLFFBQVE7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNyRCxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQ0FBVyxHQUFYLFVBQVksUUFBbUI7UUFDN0IsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FDbkMsQ0FBQztZQUNHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEQsbURBQW1EO1FBQ3JELENBQUM7UUFDRyxJQUFJLENBQ0osQ0FBQztZQUNBLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQixDQUFDO0lBQ1AsQ0FBQztJQUVELHVDQUFjLEdBQWQsVUFBZSxLQUFLLEVBQUUsUUFBbUI7UUFFdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFJLEVBQUMsVUFBVSxFQUFHLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELDRDQUFtQixHQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0IsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ25CLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFDO2dCQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3BELENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFBSTtZQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFFakIsQ0FBQztJQUVELG9DQUFXLEdBQVg7UUFDRSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2xELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBM0VVLGNBQWM7UUFEMUIsaUJBQVUsRUFBRTs7T0FDQSxjQUFjLENBNEUxQjtJQUFELHFCQUFDO0NBQUEsQUE1RUQsSUE0RUM7QUE1RVksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvdWNoYmFzZSB9IGZyb20gXCJuYXRpdmVzY3JpcHQtY291Y2hiYXNlXCI7XHJcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSBcIi4uL21vZGVsL1VzZXJEYXRhXCI7XHJcbmltcG9ydCB7IFRvYXN0eSB9IGZyb20gJ25hdGl2ZXNjcmlwdC10b2FzdHknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ291Y2hkYlNlcnZpY2Uge1xyXG5cclxuICBkYXRhYmFzZSA6IENvdWNoYmFzZSA7XHJcbiAgREFUQUJBU0VfTkFNRSA9IFwidXNlci1kYXRhYmFzZVwiO1xyXG4gIHVzZXJEYXRhIDogVXNlckRhdGE7XHJcbiAgRG9jSWQgOiBOdW1iZXJcclxuICByb3dzIDogYW55O1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIHByaXZhdGUgaW5pdENvdWNoKCkgOiB2b2lkIHtcclxuICAgIGlmKHRoaXMuZGF0YWJhc2UgPT0gdW5kZWZpbmVkKXtcclxuICAgICAgdGhpcy5kYXRhYmFzZSA9IG5ldyBDb3VjaGJhc2UodGhpcy5EQVRBQkFTRV9OQU1FKTsgLy9jcmVhdGUgZGIgaWYgbm90IHByZXNlbnQgb3IgZ2V0aW5zdGFuY2VcclxuICAgICAgdGhpcy5kYXRhYmFzZS5jcmVhdGVWaWV3KFwiZ2V0VXNlckRhdGFcIiwgXCIxXCIsIGZ1bmN0aW9uKGRvY3VtZW50LCBlbWl0dGVyKSB7XHJcbiAgICAgICAgaWYoZG9jdW1lbnQudXNlcmRhdGEpIHtcclxuICAgICAgICAgICAgZW1pdHRlci5lbWl0KGRvY3VtZW50Ll9pZCwgZG9jdW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVVzZXJEYXRhRW50cnkodXNlcmRhdGEgOiBVc2VyRGF0YSkgOiBOdW1iZXIge1xyXG4gICAgdGhpcy5pbml0Q291Y2goKTtcclxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmNyZWF0ZURvY3VtZW50KHtcclxuICAgICAgXCJ1c2VyZGF0YVwiIDogdXNlcmRhdGFcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBnZXRDb3VjaERhdGEoKSB7XHJcbiAgICBpZih0aGlzLnJvd3MgPT0gdW5kZWZpbmVkIHx8IHRoaXMucm93cy5sZW5ndGggPT0gMCl7XHJcbiAgICAgIHRoaXMuaW5pdENvdWNoKCk7XHJcbiAgICAgIGxldCByb3dzID0gdGhpcy5kYXRhYmFzZS5leGVjdXRlUXVlcnkoXCJnZXRVc2VyRGF0YVwiKTtcclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhpKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocm93c1tpXSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucm93cyA9IHJvd3M7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5yb3dzO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckRhdGEodXNlcmRhdGEgOiBVc2VyRGF0YSl7XHJcbiAgICBpZih0aGlzLmdldENvdWNoRGF0YSgpLmxlbmd0aCA9PSAwKSAvLyBuZXcgdXNlclxyXG4gICAge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY3JlYXRlVXNlckRhdGFFbnRyeSh1c2VyZGF0YSkpO1xyXG4gICAgICAvLyAgdGhpcy5Eb2NJZCA9IHRoaXMuY3JlYXRlVXNlckRhdGFFbnRyeSh1c2VyZGF0YSlcclxuICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICB0aGlzLmdldENvdWNoRGF0YSgpO1xyXG4gICAgICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVVzZXJEYXRhKGRvY0lkLCB1c2VyZGF0YSA6IFVzZXJEYXRhKVxyXG4gIHtcclxuICAgIHRoaXMuZGF0YWJhc2UudXBkYXRlRG9jdW1lbnQoZG9jSWQgLCAge1widXNlcmRhdGFcIiA6IHVzZXJkYXRhfSk7XHJcbiAgfVxyXG5cclxuICBjaGVja0xvZ2dlZEluU3RhdHVzKCkgOiBib29sZWFueyBcclxuICAgIHRoaXMuaW5pdENvdWNoKCk7XHJcbiAgICBsZXQgcm93cyA9IHRoaXMuZ2V0Q291Y2hEYXRhKCk7XHJcbiAgICBpZihyb3dzLmxlbmd0aCAhPSAwKXtcclxuICAgICAgaWYocm93c1swXS51c2VyZGF0YSl7XHJcbiAgICAgICAgcmV0dXJuIHJvd3NbMF0udXNlcmRhdGEuaXNMb2dnZWRJbiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBcclxuICB9XHJcblxyXG4gIGdldE1lc3NhZ2VzKCl7XHJcbiAgICBpZih0aGlzLnJvd3MgPT0gdW5kZWZpbmVkIHx8IHRoaXMucm93cy5sZW5ndGggPT0gMCl7XHJcbiAgICAgIHRoaXMuZ2V0Q291Y2hEYXRhKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5yb3dzWzBdLnVzZXJkYXRhLm1lc3NhZ2VzO1xyXG4gIH1cclxufVxyXG4iXX0=